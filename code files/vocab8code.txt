# Import the pandas package, then use the "read_csv" function to read
# the labeled training data
import pandas as pd 
import csv      
train = pd.read_csv("task1.txt", header=0, \
                    delimiter="\t", quoting=2)
train.shape
train.columns.values
print train["review"][0]

# Import BeautifulSoup into your workspace
from bs4 import BeautifulSoup   #remove html markups

# Initialize the BeautifulSoup object on a single movie review     
example1 = BeautifulSoup(train["review"][0])

# Print the raw review and then the output of get_text(), for comparison
print train["review"][0]
print example1.get_text() 

import re
# Use regular expressions to do a find-and-replace #remove numbers and spaces.
letters_only = re.sub("[^a-zA-Z]", " ", example1.get_text() )         # The pattern to search for # The pattern to replace it with # The text to search
print letters_only

lower_case = letters_only.lower()        # Convert to lower case
words = lower_case.split()               # Split into words

import nltk
#nltk.download()  # Download text data sets, including stop words

from nltk.corpus import stopwords # Import the stop word list
print stopwords.words("english") 

# Remove stop words from "words"
words = [w for w in words if not w in stopwords.words("english")]
print words

def review_to_words( raw_review ):
    review_text = BeautifulSoup(raw_review).get_text() 
    #
    # 2. Remove non-letters        
    letters_only = re.sub("[^a-zA-Z]", " ", review_text) 
    #
    # 3. Convert to lower case, split into individual words
    words = letters_only.lower().split()                             
    #
    # 4. In Python, searching a set is much faster than searching
    #   a list, so convert the stop words to a set
    stops = set(stopwords.words("english"))                  
    # 
    # 5. Remove stop words
    meaningful_words = [w for w in words if not w in stops]   
    #
    # 6. Join the words back into one string separated by space, 
    # and return the result.
    return( " ".join( meaningful_words ))

clean_review = review_to_words( train["review"][0] )
print clean_review


# Get the number of reviews based on the dataframe column size
num_reviews = train["review"].size

# Initialize an empty list to hold the clean reviews
clean_train_reviews = []


print "Cleaning and parsing the training set movie reviews...\n"
# Loop over each review; create an index i that goes from 0 to the length
# of the movie review list 
for i in xrange( 0, num_reviews ):
    # Call our function for each one, and add the result to the list of
    # clean reviews
	# If the index is evenly divisible by 1000, print a message
    if( (i+1)%1000 == 0 ):
        print "Review %d of %d\n" % ( i+1, num_reviews ) 
    clean_train_reviews.append( review_to_words( train["review"][i] ) )




print "Creating the bag of words...\n"
from sklearn.feature_extraction.text import CountVectorizer

# Initialize the "CountVectorizer" object, which is scikit-learn's
# bag of words tool.  
vectorizer = CountVectorizer(analyzer = "word",   \
                             tokenizer = None,    \
                             preprocessor = None, \
                             stop_words = None,   \
                             max_features = 5000) 

# fit_transform() does two functions: First, it fits the model
# and learns the vocabulary; second, it transforms our training data
# into feature vectors. The input to fit_transform should be a list of 
# strings.
train_data_features = vectorizer.fit_transform(clean_train_reviews)

# Numpy arrays are easy to work with, so convert the result to an 
# array
train_data_features = train_data_features.toarray()
print vocab,train_data_features
print train_data_features.shape

# Take a look at the words in the vocabulary
vocab = vectorizer.get_feature_names()
print vocab

import numpy as np

# Sum up the counts of each vocabulary word
dist = np.sum(train_data_features, axis=0)

n = "C:\\Users\\acer\Anaconda2\\vocab90.csv"
pn = open(n, 'w')
# For each, print the vocabulary word and the number of times it 
# appears in the training set
pn.writelines('\n'.join(vocab))
for tag, count in zip(vocab, dist):
    print count, tag
    pn.writelines(m)
    print '\t'



